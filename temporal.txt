Support for temporal operations.

Added a new datatype - timestamp (including milliseconds)

Table data :

1|155190|7706|1|17|21168.23|0.04|0.02|N|O|1996-03-13 07.53.15.254|1996-03-22 07.55.14.244|1996-03-22 07.55.14.244|DELIVER IN PERSON|TRUCK|egular courts above the|
1|67310|7311|2|36|45983.16|0.09|0.06|N|O|1996-04-12 07.55.14.274|1996-05-28 07.55.14.244|1996-04-20 07.55.14.244|TAKE BACK RETURN|MAIL|ly final dependencies: slyly bold |
1|63700|3701|3|8|13309.60|0.10|0.02|N|O|1996-01-29 07.55.14.284|1970-01-01 00.00.00.000|1996-02-31 07.55.14.244|TAKE BACK RETURN|REG AIR|riously. regular, express dep|
1|2132|4633|4|28|28955.64|0.09|0.06|N|O|1996-04-21 07.55.14.644|1970-01-01 00.00.00.000|1996-05-16 07.55.14.244|NONE|AIR|lites. fluffily even de|
1|24027|1534|3|24|22824.48|0.10|0.04|N|O|1996-03-30 07.55.14.244|1996-04-14 07.55.14.244|1996-04-01 07.55.14.244|NONE|FOB| pending foxes. slyly re|
1|15635|638|6|32|49620.16|0.07|0.02|N|O|1996-01-30 08.55.14.244|1996-02-07 07.55.14.244|1996-02-03 07.55.14.244|DELIVER IN PERSON|MAIL|arefully slyly ex|
2|106170|1191|4|38|44694.46|0.00|0.05|N|O|1997-01-28 09.55.14.244|1997-02-14 07.55.14.244|1997-02-02 07.55.14.244|TAKE BACK RETURN|RAIL|ven requests. deposits breach a|
3|4297|1798|9|45|54058.05|0.06|0.00|R|F|1994-02-02 07.33.14.244|1970-01-01 00.00.00.000|1994-02-23 07.55.14.244|NONE|AIR|ongside of the furiously brave acco|
3|19036|6540|2|49|46796.47|0.10|0.00|R|F|1993-11-09 07.34.14.244|1993-12-20 07.55.14.244|1993-11-24 07.55.14.244|TAKE BACK RETURN|RAIL| unusual accounts. eve|
3|128449|3474|3|27|39890.88|0.06|0.07|A|F|1994-01-16 07.55.14.244|1994-02-22 07.55.14.244|1994-01-23 07.55.14.244|DELIVER IN PERSON|SHIP|nal foxes wake. |


Example of a table load :

A := LOAD 'lineitem_tmp.tbl' USING ('|') AS (orderkey{1}:int , partkey{2}:int, suppkey{3}:int, linenumber{4}:int, qty{5}:int,
price{6}:decimal(10,2), discount{7}:decimal(10,2), tax{8}:decimal(10,2), returnflag{9}:varchar(1), linestatus{10}:varchar(1), shipdate{11}:timestamp,
commitdate{12}:timestamp, receiptdate{13}:timestamp);
STORE A INTO 'lineitem_tmp' BINARY;

Temporal operations use intervals - that is a data interval during which the row is valid (FROM - TO).
You declare interval using two existing timestamp columns : 

CREATE INTERVAL itv ON lineitem_tmp(shipdate, commitdate);

When working with interval data you need to know a table key to compare records with different intervals
So you create a key on the table by specifying a key column :

CREATE INDEX idx ON lineitem1(linenumber);


As you get additional data you need to append it to an existing table. You can use STORE with APPEND modifier :

1|155190|7706|1|17|21168.23|0.04|0.02|N|O|1996-03-13 07.53.15.254|1996-03-22 07.55.14.244|1996-03-22 07.55.14.244|DELIVER IN PERSON|TRUCK|egular courts above the|
1|67310|7311|2|36|45983.16|0.09|0.06|N|O|1996-04-12 07.55.14.274|1996-05-28 07.55.14.244|1996-04-20 07.55.14.244|TAKE BACK RETURN|MAIL|ly final dependencies: slyly bold |
1|63700|3701|3|8|13309.60|0.10|0.02|N|O|1996-01-29 07.55.14.284|1997-01-01 00.00.00.000|1996-02-31 07.55.14.244|TAKE BACK RETURN|REG AIR|riously. regular, express dep|
1|2132|4633|4|28|28955.64|0.09|0.06|N|O|1996-04-21 07.55.14.644|1997-01-01 00.00.00.000|1996-05-16 07.55.14.244|NONE|AIR|lites. fluffily even de|
1|24027|1534|3|24|22824.48|0.10|0.04|N|O|1996-03-30 07.55.14.244|1996-04-14 07.55.14.244|1996-04-01 07.55.14.244|NONE|FOB| pending foxes. slyly re|
1|15635|638|6|32|49620.16|0.07|0.02|N|O|1996-01-30 08.55.14.244|1996-02-07 07.55.14.244|1996-02-03 07.55.14.244|DELIVER IN PERSON|MAIL|arefully slyly ex|
2|106170|1191|4|38|44694.46|0.00|0.05|N|O|1997-01-28 09.55.14.244|1997-02-14 07.55.14.244|1997-02-02 07.55.14.244|TAKE BACK RETURN|RAIL|ven requests. deposits breach a|
3|4297|1798|9|45|54058.05|0.06|0.00|R|F|1995-02-02 07.33.14.244|1970-01-01 00.00.00.000|1994-02-23 07.55.14.244|NONE|AIR|ongside of the furiously brave acco|
3|19036|6540|2|49|46796.47|0.10|0.00|R|F|1993-11-09 07.34.14.244|1993-12-20 07.55.14.244|1993-11-24 07.55.14.244|TAKE BACK RETURN|RAIL| unusual accounts. eve|
3|128449|3474|3|27|39890.88|0.06|0.07|A|F|1994-01-16 07.55.14.244|1994-02-22 07.55.14.244|1994-01-23 07.55.14.244|DELIVER IN PERSON|SHIP|nal foxes wake. |

A := LOAD 'lineitem_tmp.tbl' USING ('|') AS (orderkey{1}:int , partkey{2}:int, suppkey{3}:int, linenumber{4}:int, qty{5}:int,
price{6}:decimal(10,2), discount{7}:decimal(10,2), tax{8}:decimal(10,2), returnflag{9}:varchar(1), linestatus{10}:varchar(1), shipdate{11}:timestamp,
commitdate{12}:timestamp, receiptdate{13}:timestamp);
STORE A INTO 'lineitem_tmp' APPEND BINARY;

The data will be appended to an existing table and all record intervals updated to reflect the new data. That is, if there was a record with no valid "TO" interval field and the new batch contains a record with the same key, the records's "TO" field is updated with the value of "FROM" of the new record.

The implementation of interval makes it trivial to implement the temporal operators like time travel, temporal joins and temporal aggregations using timestamp filter operations :

Time travel (like it was on 1996-03-30) :

B := FILTER lineitem BY shipdate >= "1996-03-30 00.00.00.000" AND shipdate < "1996-03-31 00.00.00.000";
C := SELECT linenumber AS ln, shipdate AS sd FROM B;
D := ORDER C BY sd ASC;
STORE D INTO 'mytest.txt' USING ('|');

Temporal joins ( using temporal restrictions on one or more tables)

LF := FILTER lineitem BY shipdate >= "1994-01-16 07.55.14.244";
OLC := SELECT shipdate AS shipdate, price AS price, discount AS discount 
       FROM LF JOIN LF ON linenumber = linenumber;	  
STORE OLC INTO 'mytest.txt' USING ('|') LIMIT 10;

Temporal aggregations :

LF := FILTER lineitem BY shipdate >= "1994-01-16 07.55.14.244";
F := SELECT shipdate AS shipdate1,
            SUM(price*(1-discount)) AS sum_revenue  FROM LF 
 	 GROUP BY shipdate;		  
RES := ORDER F BY sum_revenue ASC;	   
STORE RES INTO 'mytest.txt' USING ('|') LIMIT 10;
















